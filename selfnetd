#!/usr/bin/python2
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

import os
import sys
import shutil
import logging
import tempfile
import argparse
import daemon
from gi.repository import GLib

sys.path.append('/usr/lib/selfnetd')
sys.path.append('/usr/lib/selfnetd/modules')		# fixme
import flogging
from sn_util import SnUtil
from sn_param import SnParam
from sn_manager_config import SnConfigManager
from sn_manager_local import SnLocalManager
from sn_manager_peer import SnPeerManager

def parseArgs():
	argParser = argparse.ArgumentParser()

	argParser.add_argument("-D", dest='daemonize', action="store_false",
		help="selfnetd will not detach and does not become a daemon when this option is specified")

	argParser.add_argument("-d", "--debug-level", dest='debug_level',
		choices=['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'], default="WARNING",
		help="Set output debug message level")

	return argParser.parse_args()

################################################################################

with daemon.DaemonContext():
	parseResult = parseArgs()
	param = SnParam()
	try:
		# create directory
		SnUtil.mkDirAndClear(param.runDir)
		param.tmpDir = tempfile.mkdtemp(prefix="selfnetd-")

		# set logging parameter
		flogging.init(param.logFile)
		if parseResult.debug_level is not None:
			flogging.setLogLevel(parseResult.debug_level.upper())

		# create main loop
		param.mainloop = GLib.MainLoop()

		# create config manager / peer manager
		param.configManager = SnConfigManager(param)
		param.localManager = SnLocalManager(param)
		param.peerManager = SnPeerManager(param)

		# start main loop
		param.mainloop.run()
	finally:
		logging.shutdown()
		if param.tmpDir is not None and os.path.exists(param.tmpDir):
			shutil.rmtree(param.tmpDir)

