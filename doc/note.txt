自带功能：
1. auto discovery if no router present
2. register to router if router present



1. 比较selfnet的host配置
2. 电源操作reboot、poweroff、poweron、suspend、hibernate、hybrid-sleep、wakeup
3. peer mode：online、offline、rebooting、poweroff、suspend、hibernate、last-operation(resumable)
4. rebooting-interval


1. all plugins runs in seperate process.


role: freeman, leader, member, sub-leader

role is applied on interface


-----
leader
------
  |
  |
------
member
------

-----
freeman
------
  |
  |
------
freeman
------


-----
leader
------
  |
  |
------
sub-leader
leader
------
  |
  |
------
member
------


-----           -----
leader          leader
------          ----
  |              |  
  |              |
  \              /
------------------
 member    member
-----------------


-----           -----
leader          freeman
------          ----
  |              |  
  |              |
  \              /
------------------
 member    freeman
-----------------



-----
leader
------
  |
  |
-------------------------
sub-leader
leader           freeman
---------------------------
  |                 |
  |                 |
------           -------
member            freeman
------           -------





host_id:
1. ipv4-address
2. ipv6-address
3. localhost

module, peer module

module instancing mode:
1. singleton
2. per-user
3. per-user-host
4. per-user-host-app

<module>
	<app-id>openssh-server</app-id>
	<keyword>ssh-server</keyword>
	<instancing-mode>singleton</instancing-mode>
	<match-peer>
		<app-id>openssh-client</app-id>
		<keyword>ssh-client</keyword>
	<match-peer>
</module>

<module>
	<app-id>openssh-client</app-id>
	<keyword>ssh-client</keyword>
	<instancing-mode>per-user-host-app</instancing-mode>
	<match-peer>
		<app-id>openssh-server</app-id>
		<keyword>ssh-server</keyword>
	<match-peer>
	<create-by-peer/>
</module>

<module>
	<app-id>selfnet-synchronizer</app-id>
	<instancing-mode>per-user-host-app</instancing-mode>
	<match-peer>
		<app-id>selfnet-synchronizer</app-id>
	<match-peer>
</module>






class ModuleSingleton:

	def __init__(self, api):
		pass

	def peer_module_appear(self, username, peer_host_id, peer_app_id):
		pass

	def peer_module_disappear(self, username, peer_host_id, peer_app_id):
		pass

	def message_received(self, username, peer_host_id, peer_app_id, message):
		pass


class ModulePerUser:

	def __init__(self, api, username):
		pass

	def peer_module_appear(self, peer_host_id, peer_app_id):
		pass

	def peer_module_disappear(self, peer_host_id, peer_app_id):
		pass

	def message_received(self, peer_host_id, message):
		pass


class ModulePerUserHost:

	def __init__(self, api, username, peer_host_id):
		pass

	def peer_module_appear(self, peer_app_id):
		pass

	def peer_module_disappear(self, peer_app_id):
		pass

	def message_received(self, peer_app_id, message):
		pass


class ModulePerUserHostApp:

	def __init__(self, api, username, peer_host_id, peer_app_id):
		pass

	def message_received(self, message):
		pass



class ModuleApi:

	def sendData(self, data):
		pass



    def getPeerName(self):
        return self.peerName

    def getUserName(self):
        return self.userName

    def getModuleName(self):
        return self.moduleName

    def getHostName(self):
        return socket.gethostname()

    def isLocalPeer(self):
        return self.peerName == socket.gethostname()

    def getTmpDir(self):
        """Temp directory is created when being used for the first time, deleted
           before change to inactive state"""

        if not os.path.exists(self.tmpDir):
            os.mkdir(self.tmpDir)
        return self.tmpDir

    def sendObject(self, obj):
        self.coreObj._sendObject(self.peerName, self.userName, self.moduleName, obj)

    def setWorkState(self, workState):
        assert workState in [SnModuleInstance.WORK_STATE_IDLE, SnModuleInstance.WORK_STATE_WORKING]
        self.coreObj._setWorkState(self.peerName, self.userName, self.moduleName, workState)

    def logDebug(self, pattern, *args):
        self.coreObj._moduleLog(self.peerName, self.userName, self.moduleName, logging.DEBUG, pattern, args)

    def logInfo(self, pattern, *args):
        self.coreObj._moduleLog(self.peerName, self.userName, self.moduleName, logging.INFO, pattern, args)

    def logWarning(self, pattern, *args):
        self.coreObj._moduleLog(self.peerName, self.userName, self.moduleName, logging.WARNING, pattern, args)

    def logError(self, pattern, *args):
        self.coreObj._moduleLog(self.peerName, self.userName, self.moduleName, logging.ERROR, pattern, args)

    def logCritical(self, pattern, *args):
        self.coreObj._moduleLog(self.peerName, self.userName, self.moduleName, logging.CRITICAL, pattern, args)

























系统功能：
1. 对比系统配置
2. 同步系统目录


系统配置对比客户端				system
系统配置对比服务端				system
distcc服务端					system
distcc客户端					system
远程界面服务端					user-priviledged
远程界面客户端					user
ssh服务端					user-priviledged
ssh客户端					user
同步home目录服务端				user
同步home目录客户端				user





<host name="fpemud-workstation">
	<server-parameter>
	</server-parameter>

	<client>
		<connection type="lan">
			<port>2107</port>
		</connection>
		<power-operation>
		</power-operation>


		<power-support>power-on</power-support>
		<power-support>power-off</power-support>
		<power-support>wake-up</power-support>
		<power-support>suspend</power-support>
		<power-support>hibernate</power-support>
		<power-support>start</power-support>
	</client>
	<client>
		<connection type="wan">
			<domain-name>fpemud-workstation.fpemud.org</domain-name>
			<address>1.1.1.1</address>
			<port>2107</port>
		</connection>
	</client>
</host>
